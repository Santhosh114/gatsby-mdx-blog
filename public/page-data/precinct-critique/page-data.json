{"componentChunkName":"component---src-templates-blog-post-js","path":"/precinct-critique/","result":{"data":{"site":{"siteMetadata":{"title":"Over Engineered Data Viz Blog","author":"Santhosh Soundararajan"}},"mdx":{"id":"d20d2d84-db5c-5155-a6ce-d10354729a40","code":{"body":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar layoutProps = {};\n\nvar MDXContent = /*#__PURE__*/function (_React$Component) {\n  _inherits(MDXContent, _React$Component);\n\n  var _super = _createSuper(MDXContent);\n\n  function MDXContent(props) {\n    var _this;\n\n    _classCallCheck(this, MDXContent);\n\n    _this = _super.call(this, props);\n    _this.layout = null;\n    return _this;\n  }\n\n  _createClass(MDXContent, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          components = _this$props.components,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n      return /*#__PURE__*/React.createElement(MDXTag, {\n        name: \"wrapper\",\n        components: components\n      }, /*#__PURE__*/React.createElement(ImageComponent, {\n        queryString: 'postCritique',\n        widthProp: 700,\n        label: \"Article @nytimes/upshot titled\",\n        link: ['The Most Detailed Maps Youâ€™ll See From the Midterm Elections', 'https://www.nytimes.com/interactive/2014/11/04/upshot/senate-maps.html']\n      }), /*#__PURE__*/React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components\n      }, \"Infograph Overview\"), /*#__PURE__*/React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"This visualization is a precinct-level choropleth map of election results from the midterm elections.\\nThe objective of the visualization is to show a fine-grained analysis of how the Republicans and\\nDemocrats are spread along with the population density, measured by the graduated color scale.\"), /*#__PURE__*/React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"A precinct is one of the part into which a town or city is divided in order to organize elections,\\nas reported by the article- \\u201Cthere were more than 175,000 precincts in the United States in 2012,\\nfifty times the number of counties\\u201D.\"), /*#__PURE__*/React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"So this demonstrates the sheer efficacy of the precinct-level data and how effectively one can draw insights\\nwhen the data is much finer. Now the county level analysis of polling results gives a clearer picture of how\\nthe data spread within the county.\\nHence, this visualization for me appears to have the potential to convey actionable insights.\"), /*#__PURE__*/React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components\n      }, \"Visualization Technique\"), /*#__PURE__*/React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"This is a geo-location based map visualization technique called choropleth map and it uses a\\ncoloring scheme inside defined areas on a map in order to show value levels and indicate the average\\nvalues of some property or quantity in those areas.\"), /*#__PURE__*/React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components\n      }, \"How it works\"), /*#__PURE__*/React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"The basic design is to represent Democratic in blue and Republican in red with various hue levels\\nbased on the population density within the precincts. Much needed zoom functionality is provided with\\ndynamic county-level labeling in the first layer and precinct-level labeling in the further zoom levels.\"), /*#__PURE__*/React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components\n      }, /*#__PURE__*/React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\"\n      }, \"Key insights described as a result of detected patterns at different areas/regions.\"), /*#__PURE__*/React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\"\n      }, \"Overall percentage split-up shown state wide per candidate.\"), /*#__PURE__*/React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\"\n      }, \"Compare and contrasts population based on its metadata like candidate origin, racial attributes etc.\"), /*#__PURE__*/React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\"\n      }, \"Population density as hue variation augmented with party specific colors.\"), /*#__PURE__*/React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\"\n      }, \"MouseOver shows the candidate information and total number of votes.\"), /*#__PURE__*/React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\"\n      }, \"Minimal design with the insights described in the form of plain text.\"), /*#__PURE__*/React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\"\n      }, \"Every visualization technique has it own pros and cons in terms of how well it\\ndepicts the data. This is an excellent example of geo-data-visualization with optimal\\nusage of design, color and area breakdown. The following are the few points summarizing this.\")), /*#__PURE__*/React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components\n      }, \"Design Mileage\"), /*#__PURE__*/React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"The precinct-level data clearly adds a lot of detail and outlines distinct clusters.\\nHelpful for finding intriguing relationships between two or more geographic location\\nbased on the nature of the population. Give an idea of how each area compares with other\\nn terms of number and spread of votes.\"), /*#__PURE__*/React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components\n      }, \"Data Sources\"), /*#__PURE__*/React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"State wise polling data is sourced from the corresponding state\\u2019s Board of Elections,\\ntherefore the probe for data integrity will be simply out of question, at least from where\\nI stand\"));\n    }\n  }]);\n\n  return MDXContent;\n}(React.Component);\n\nreturn MDXContent;\nMDXContent.isMDXComponent = true;"},"frontmatter":{"title":"Critique on Precinct-Level Map","date":"September 05, 2015"}}},"pageContext":{"slug":"/precinct-critique/","previous":null,"next":{"code":{"scope":""},"fields":{"slug":"/parallel-coordinates/"},"frontmatter":{"title":"Birth of Parallel Co-ordinates"}}}}}